        my_dt[,PRS_comb:=((1-alpha)*PRS_EUR)+(alpha*PRS_plink)]
        res2<-partial.R2(lm(HEIGHTX~AGE+AGE2+EUR_ANC, data=my_dt), lm(HEIGHTX~AGE+AGE2+EUR_ANC+PRS_comb,data=my_dt ))
        return(res2)
}
my_alpha_conc_v2<-function(alpha=0.9, dt='final2_HRS_JHS'){
        my_dt<-get(dt)
        my_dt[,PRS_comb:=((1-alpha)*PRS_EUR)+(alpha*PRS_plink)]
        res2<-partial.R2(lm(HEIGHTX~SEX+AGE+AGE2+Dt+EUR_ANC, data=my_dt), lm(HEIGHTX~SEX+AGE+AGE2+Dt+EUR_ANC+PRS_comb, data=my_dt))
        return(res2)
}
lapply(a_vec, function(X) my_alpha_v2(alpha=X))-> wei_PRS_v2
lapply(a_vec, function(X) my_alpha_conc_v2(alpha=X))-> wei_PRS_conc_v2
rbind(data.table(part_R2=unlist(wei_PRS_v2), alfa=a_vec, Dataset='WHI'), data.table(part_R2=unlist(wei_PRS_conc_v2), alfa=a_vec, Dataset='JHS+HRS'))-> wanna_plot_v2
#
ggplot(wanna_plot_v2, aes(x=alfa, y=part_R2, colour=Dataset)) + geom_point(size=0.8)+ geom_line() +
geom_vline(xintercept=optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, col='red', lty=2) +
geom_vline(xintercept=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, col='red', lty=2) +
geom_hline(yintercept=optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, col='red', lty=2) +
geom_hline(yintercept=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, col='red', lty=2) +
coord_cartesian(ylim = c(0, 0.048), xlim=c(0,0.6))
ggsave('~/height_prediction/gwas/WHI/figs/alfa_plink.pdf')
optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001) #one liner for max 0.1221 0.04169
optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001) #one liner for max  0.1069 0.02857
##################
max_alpha<-function(alpha, dt='final2'){
        my_dt<-get(dt)
        my_dt[,PRS_comb:=(AFR_ANC*alpha*PRS_all)+((1-(alpha*AFR_ANC))*PRS_EUR)]
        res<-partial.R2(lm(HEIGHTX~AGE+AGE2+EUR_ANC, data=my_dt), lm(HEIGHTX~AGE+AGE2+EUR_ANC+PRS_comb, data=my_dt))
        return(res)
}
max_alpha_conc<-function(alpha, dt='final2_HRS_JHS'){
        my_dt<-get(dt)
        my_dt[,PRS_comb:=(AFR_ANC*alpha*PRS_all)+((1-(alpha*AFR_ANC))*PRS_EUR)]
        res<-partial.R2(lm(HEIGHTX~Dt+SEX+AGE+AGE2+EUR_ANC, data=my_dt), lm(HEIGHTX~Dt+SEX+AGE+AGE2+EUR_ANC+PRS_comb, data=my_dt))
        return(res)
}
a_vec2<-seq(from=0, to=1, by=0.001)
all_prs<-lapply(a_vec, function(X) max_alpha(alpha=X))
all_prs_conc<-lapply(a_vec, function(X) max_alpha_conc(alpha=X))
optimize(max_alpha, interval=c(0,1), maximum=T, tol = 0.0001) # 0.1498716 #0.04163228
optimize(max_alpha_conc, interval=c(0,1), maximum=T, tol = 0.0001) #0.1410062 #0.02863161
temp_dt<-rbind(data.table(part_R2=unlist(all_prs), alfa=a_vec, Dataset='WHI'), data.table(part_R2=unlist(all_prs_conc), alfa=a_vec, Dataset='JHS+HRS'))
saveRDS(temp_dt, file='~/height_prediction/gwas/WHI/output/temp_dt.Rds')
ggplot(temp_dt, aes(x=alfa, y=part_R2, colour=Dataset)) + geom_point(size=0.8)+ geom_line() +
geom_vline(xintercept=optimize(max_alpha, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, col='red', lty=2) +
geom_vline(xintercept=optimize(max_alpha_conc, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, col='red', lty=2) +
geom_hline(yintercept=optimize(max_alpha, interval=c(0,1), maximum=T, tol = 0.0001)$objective, col='red', lty=2) +
geom_hline(yintercept=optimize(max_alpha_conc, interval=c(0,1), maximum=T, tol = 0.0001)$objective, col='red', lty=2) +
coord_cartesian(ylim = c(0, 0.048), xlim=c(0,0.6))
ggsave('~/height_prediction/gwas/WHI/figs/alfa_LA_withAnc.pdf')
max_alpha_v2<-function(alpha, dt='final2'){
        my_dt<-get(dt)
        my_dt[,PRS_comb:=(AFR_ANC*alpha*PRS_plink)+((1-(alpha*AFR_ANC))*PRS_EUR)]
        res<-partial.R2(lm(HEIGHTX~AGE+AGE2+EUR_ANC, data=my_dt), lm(HEIGHTX~AGE+AGE2+EUR_ANC+PRS_comb, data=my_dt))
        return(res)
}
max_alpha_conc_v2<-function(alpha, dt='final2_HRS_JHS'){
        my_dt<-get(dt)
        my_dt[,PRS_comb:=(AFR_ANC*alpha*PRS_plink)+((1-(alpha*AFR_ANC))*PRS_EUR)]
        res<-partial.R2(lm(HEIGHTX~Dt+SEX+AGE+AGE2+EUR_ANC, data=my_dt), lm(HEIGHTX~Dt+SEX+AGE+AGE2+EUR_ANC+PRS_comb, data=my_dt))
        return(res)
}
all_prs_v2<-lapply(a_vec, function(X) max_alpha_v2(alpha=X))
all_prs_conc_v2<-lapply(a_vec, function(X) max_alpha_conc_v2(alpha=X))
optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001) #
optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001) #
temp_dt_v2<-rbind(data.table(part_R2=unlist(all_prs_v2), alfa=a_vec, Dataset='WHI'), data.table(part_R2=unlist(all_prs_conc_v2), alfa=a_vec, Dataset='JHS+HRS'))
saveRDS(temp_dt_v2, file='~/height_prediction/gwas/WHI/output/temp_dt_v2.Rds')
ggplot(temp_dt_v2, aes(x=alfa, y=part_R2, colour=Dataset)) + geom_point(size=0.8)+ geom_line() +
geom_vline(xintercept=optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, col='red', lty=2) +
geom_vline(xintercept=optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, col='red', lty=2) +
geom_hline(yintercept=optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, col='red', lty=2) +
geom_hline(yintercept=optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, col='red', lty=2) +
coord_cartesian(ylim = c(0, 0.048), xlim=c(0,0.6))
ggsave('~/height_prediction/gwas/WHI/figs/alfa_plink_withAnc.pdf')
test<-cbind(wanna_plot,temp_dt)
test4<-cbind(wanna_plot_v2, temp_dt_v2)
#test[,alfa:=NULL]
#test4[,alfa:=NULL]
test[,alpha:=alfa]
test[,alfa:=NULL]
test[,alfa:=NULL]
test4[,alpha:=alfa]
test4[,alfa:=NULL]
test4[,alfa:=NULL]
colnames(test)[1]<-"PRS1"
colnames(test)[3]<-"PRS2"
colnames(test4)[1]<-"PRS1"
colnames(test4)[3]<-"PRS2"
test[,Dataset:=NULL]
test4[,Dataset:=NULL]
test
test4
rbind(test,test4)
rbind(test,test4)-> test6
melt(test5, id=c('Dataset', 'alpha'))
melt(test6, id=c('Dataset', 'alpha'))
melt(test,id=c('Dataset', 'alpha'))-> test2
 melt(test4,id=c('Dataset', 'alpha'))-> test5
test2
test5
test2
melt(test,id=c('Dataset', 'alpha'))-> test2
 melt(test4,id=c('Dataset', 'alpha'))-> test5
test2
test5
ggplot(test5, aes(x=alpha, y=value, linetype=variable)) + facet_wrap(~Dataset)+
geom_line(size=1.2) + coord_cartesian(xlim=c(0,0.5), ylim=c(0.02, 0.042)) + labs(x="Alpha", y=expression(Partial~R^2)) +
annotate("segment", x = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.04, yend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective,colour='gray', size=1, alpha=0.6, arrow=arrow()) +
annotate("segment", x = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.043, yend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow(), lty=2) +
annotate("segment", x = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum,, xend = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.027, yend=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow()) +
annotate("segment", x = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.03, yend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour = "gray", size=1, alpha=0.6, arrow=arrow(), lty=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.key=element_blank(), legend.background=element_blank(),legend.title=element_blank()) + labs(x="Alpha", y=expression(Partial~R^2))
ggsave('~/height_prediction/gwas/WHI/figs/test_this_plink.pdf')
ggplot(test5, aes(x=alpha, y=value, linetype=variable)) + facet_wrap(~Dataset)+
geom_line(size=1.2) + coord_cartesian(xlim=c(0,0.5), ylim=c(0.02, 0.042)) + labs(x="Alpha", y=expression(Partial~R^2)) +
annotate("segment", x = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.04, yend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective,colour='gray', size=1, alpha=0.6, arrow=arrow()) +
annotate("segment", x = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.043, yend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow(), lty=2) +
annotate("segment", x = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum,, xend = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.027, yend=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow()) +
annotate("segment", x = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.03, yend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour = "gray", size=1, alpha=0.6, arrow=arrow(), lty=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.key=element_blank(), legend.background=element_blank(),legend.title=element_blank()) + labs(x="Alpha", y=expression(Partial~R^2))
ggsave('~/height_prediction/gwas/WHI/figs/test_this_plink.pdf')
ggplot(test5, aes(x=alpha, y=value, linetype=variable)) + facet_wrap(~Dataset)+
geom_line(size=1.2) + coord_cartesian(xlim=c(0,0.5), ylim=c(0.02, 0.042)) + labs(x="Alpha", y=expression(Partial~R^2)) +
#annotate("segment", x = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.04, yend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective,colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.043, yend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow(), lty=2) +
#annotate("segment", x = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum,, xend = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.027, yend=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.03, yend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour = "gray", size=1, alpha=0.6, arrow=arrow(), lty=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.key=element_blank(), legend.background=element_blank(),legend.title=element_blank()) + labs(x="Alpha", y=expression(Partial~R^2))
ggsave('~/height_prediction/gwas/WHI/figs/test_this_plink.pdf')
ggsave('~/height_prediction/gwas/WHI/figs/test_this_plink.pdf')
ggplot(test5, aes(x=alpha, y=value, colour=variable)) + facet_wrap(~Dataset)+
fill_color_manual(values=c("#96a8b2", "#101010")+
geom_line(size=1.2) + coord_cartesian(xlim=c(0,0.5), ylim=c(0.02, 0.042)) + labs(x="Alpha", y=expression(Partial~R^2)) +
#annotate("segment", x = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.04, yend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective,colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.043, yend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow(), lty=2) +
#annotate("segment", x = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum,, xend = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.027, yend=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.03, yend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour = "gray", size=1, alpha=0.6, arrow=arrow(), lty=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.key=element_blank(), legend.background=element_blank(),legend.title=element_blank()) + labs(x="Alpha", y=expression(Partial~R^2))
ggsave('~/height_prediction/gwas/WHI/figs/test_this_plink.pdf')
ggplot(test5, aes(x=alpha, y=value, colour=variable)) + facet_wrap(~Dataset)+
fill_color_manual(values=c("#96a8b2", "#101010")) +
geom_line(size=1.2) + coord_cartesian(xlim=c(0,0.5), ylim=c(0.02, 0.042)) + labs(x="Alpha", y=expression(Partial~R^2)) +
#annotate("segment", x = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.04, yend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective,colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.043, yend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow(), lty=2) +
#annotate("segment", x = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum,, xend = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.027, yend=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.03, yend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour = "gray", size=1, alpha=0.6, arrow=arrow(), lty=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.key=element_blank(), legend.background=element_blank(),legend.title=element_blank()) + labs(x="Alpha", y=expression(Partial~R^2))
ggplot(test5, aes(x=alpha, y=value, colour=variable)) + facet_wrap(~Dataset)+
fill_colour_manual(values=c("#96a8b2", "#101010")) +
geom_line(size=1.2) + coord_cartesian(xlim=c(0,0.5), ylim=c(0.02, 0.042)) + labs(x="Alpha", y=expression(Partial~R^2)) +
#annotate("segment", x = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.04, yend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective,colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.043, yend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow(), lty=2) +
#annotate("segment", x = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum,, xend = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.027, yend=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.03, yend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour = "gray", size=1, alpha=0.6, arrow=arrow(), lty=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.key=element_blank(), legend.background=element_blank(),legend.title=element_blank()) + labs(x="Alpha", y=expression(Partial~R^2))
ggplot(test5, aes(x=alpha, y=value, colour=variable)) + facet_wrap(~Dataset)+
scale_colour_manual(values=c("#96a8b2", "#101010")) +
geom_line(size=1.2) + coord_cartesian(xlim=c(0,0.5), ylim=c(0.02, 0.042)) + labs(x="Alpha", y=expression(Partial~R^2)) +
#annotate("segment", x = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.04, yend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective,colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.043, yend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow(), lty=2) +
#annotate("segment", x = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum,, xend = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.027, yend=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.03, yend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour = "gray", size=1, alpha=0.6, arrow=arrow(), lty=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.key=element_blank(), legend.background=element_blank(),legend.title=element_blank()) + labs(x="Alpha", y=expression(Partial~R^2))
ggsave('~/height_prediction/gwas/WHI/figs/test_this_plink.pdf')
ggplot(test5, aes(x=alpha, y=value, colour=variable)) + facet_wrap(~Dataset)+
scale_colour_manual(values=c("#96a8b2", "#101010")) +
geom_line(size=1.2) + coord_cartesian(xlim=c(0,0.5), ylim=c(0.02, 0.042)) + labs(x="Alpha", y=expression(Partial~R^2)) +
#annotate("segment", x = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.04, yend = optimize(my_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective,colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.043, yend = optimize(max_alpha_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow(), lty=2) +
#annotate("segment", x = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum,, xend = optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.027, yend=optimize(my_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour='gray', size=1, alpha=0.6, arrow=arrow()) +
#annotate("segment", x = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, xend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$maximum, y = 0.03, yend = optimize(max_alpha_conc_v2, interval=c(0,1), maximum=T, tol = 0.0001)$objective, colour = "gray", size=1, alpha=0.6, arrow=arrow(), lty=2) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.key=element_blank(), legend.background=element_blank(),legend.title=element_blank(), legend.text=element_text(size=12)) + labs(x="Alpha", y=expression(Partial~R^2))
ggsave('~/height_prediction/gwas/WHI/figs/test_this_plink.pdf')
source('combine_datasets.R')
txtStop()
data.table(Set=unique(ALL4$Set), Nr_SNPs=unique(ALL4$Nr_SNPs_UKB))->A1
ALL4[grep("phys",  ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_phys
ALL4[grep("genet", ALL4$Set),][,.(Set,Intercept,Slope,Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_genet
ALL4[grep("LD",    ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_LD
dt_LD
dt_LD
dt_LD %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_LD #remove ukb_eur
dt_phys %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_phys
dt_genet %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_genet
dt_LD
ALL4
ALL4[Med_Eur_Anc==1]
ALL4[Med_Eur_Anc==1][1,]
ALL3<-vector('list', length(names(B_JHS)))
names(ALL3)<- names(B_JHS)
for (I in names(B_JHS)){
        if(args[1]=='sib_betas'){
                ALL3[[I]]<-rbind(B_JHS[[I]][1:2,][, Dataset:='JHS_afr'], B_WHI[[I]][1:4,][, Dataset:='WHI_afr'], B_UKB_afr[[I]][1:4,][,Dataset:='UKB_afr'],B_HRS_afr[[I]][1:2,][, Dataset:='HRS_afr'],  B_HRS_eur[[I]], B_UKB_eur[[I]])
         tmp<-lm(R_sq~Med_Eur_Anc,weights=1/
        c(var(results.JHS[[I]][[1]]$t), var(results.JHS[[I]][[2]]$t), var(results.WHI[[I]][[1]]$t), var(results.WHI[[I]][[2]]$t), var(results.WHI[[I]][[3]]$t), var(results.WHI[[I]][[4]]$t), var(results.UKB_afr[[I]][[1]]$t),var(results.UKB_afr[[I]][[2]]$t), var(results.UKB_afr[[I]][[3]]$t), var(results.UKB_afr[[I]][[4]]$t), var(results.HRS_afr[[I]][[1]]$t), var(results.HRS_afr[[I]][[2]]$t),var(results.UKB_eur[[I]]$t),var(results.HRS_eur[[I]]$t)), data=ALL3[[I]])
        } else{
                ALL3[[I]]<-rbind(B_JHS[[I]][1:2,][, Dataset:='JHS_afr'], B_WHI[[I]][1:4,][, Dataset:='WHI_afr'], B_UKB_afr[[I]][1:4,][,Dataset:='UKB_afr'],B_HRS_afr[[I]][1:2,][, Dataset:='HRS_afr'],  B_HRS_eur[[I]],  B_UKB_eur[[I]])
                tmp<-lm(R_sq~Med_Eur_Anc,weights=1/
        c(var(results.JHS[[I]][[1]]$t), var(results.JHS[[I]][[2]]$t), var(results.WHI[[I]][[1]]$t), var(results.WHI[[I]][[2]]$t), var(results.WHI[[I]][[3]]$t), var(results.WHI[[I]][[4]]$t), var(results.UKB_afr[[I]][[1]]$t),var(results.UKB_afr[[I]][[2]]$t), var(results.UKB_afr[[I]][[3]]$t), var(results.UKB_afr[[I]][[4]]$t), var(results.HRS_afr[[I]][[1]]$t), var(results.HRS_afr[[I]][[2]]$t),var(results.HRS_eur[[I]]$t), var(results.UKB_eur[[I]]$t)), data=ALL3[[I]])
        }
        ALL3[[I]][,Set:=I]
        readRDS(paste0('~/height_prediction/', args[1],'/WHI/output/Nr_SNPs_WHI.Rds'))[Name==I][, Nr]->a
        readRDS(paste0('~/height_prediction/', args[1],'/ukb_afr/output/Nr_SNPs_UKB_afr.Rds'))[Name==I][, Nr]->b
        readRDS(paste0('~/height_prediction/', args[1],'/JHS/output/Nr_SNPs_JHS.Rds'))[Name==I][, Nr]->d
        readRDS(paste0('~/height_prediction/', args[1],'/HRS_eur/output/Nr_SNPs_HRS.Rds'))[Name==I][, Nr]->f
        #readRDS('Nr_SNPs_pennBB_afr.Rds')[Name==I][, Nr]->f
        #readRDS('Nr_SNPs_pennBB_eur.Rds')[Name==I][, Nr]->g
        ALL3[[I]][,Intercept:=coef(tmp)[[1]]][,Slope:=coef(tmp)[[2]]]
       ALL3[[I]][,Slope_Intercept:=sum(coef(tmp))]
        ALL3[[I]][, Nr_SNPs_WHI:=a]
        ALL3[[I]][, Nr_SNPs_UKB:=b]
        ALL3[[I]][, Nr_SNPs_JHS:=d]
        ALL3[[I]][, Nr_SNPs_HRS_eur:=f]
        ALL3[[I]][, Nr_SNPs_HRS_afr:=f]
        cat(I, ' \n')
}
#if(args[1]=='gwas'){
do.call(rbind,ALL3)[,.(Quant,Set,Intercept,Slope_Intercept, Slope, Nr_SNPs_WHI, Nr_SNPs_UKB, R_sq, Med_Eur_Anc)]->ALL4
#add nr of snps
ALL4[grep("phys",  ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_phys
ALL4[grep("genet", ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_genet
ALL4[grep("LD",    ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_LD
#factor(dt$Set)-> dt$Setp
factor(dt_phys$Set)-> dt_phys$Set
factor(dt_genet$Set)-> dt_genet$Set
factor(dt_LD$Set)-> dt_LD$Set
ALL3<-vector('list', length(names(B_JHS)))
names(ALL3)<- names(B_JHS)
for (I in names(B_JHS)){
        if(args[1]=='sib_betas'){
                ALL3[[I]]<-rbind(B_JHS[[I]][1:2,][, Dataset:='JHS_afr'], B_WHI[[I]][1:4,][, Dataset:='WHI_afr'], B_UKB_afr[[I]][1:4,][,Dataset:='UKB_afr'],B_HRS_afr[[I]][1:2,][, Dataset:='HRS_afr'],  B_HRS_eur[[I]], B_UKB_eur[[I]])
         tmp<-lm(R_sq~Med_Eur_Anc,weights=1/
        c(var(results.JHS[[I]][[1]]$t), var(results.JHS[[I]][[2]]$t), var(results.WHI[[I]][[1]]$t), var(results.WHI[[I]][[2]]$t), var(results.WHI[[I]][[3]]$t), var(results.WHI[[I]][[4]]$t), var(results.UKB_afr[[I]][[1]]$t),var(results.UKB_afr[[I]][[2]]$t), var(results.UKB_afr[[I]][[3]]$t), var(results.UKB_afr[[I]][[4]]$t), var(results.HRS_afr[[I]][[1]]$t), var(results.HRS_afr[[I]][[2]]$t),var(results.UKB_eur[[I]]$t),var(results.HRS_eur[[I]]$t)), data=ALL3[[I]])
        } else{
                ALL3[[I]]<-rbind(B_JHS[[I]][1:2,][, Dataset:='JHS_afr'], B_WHI[[I]][1:4,][, Dataset:='WHI_afr'], B_UKB_afr[[I]][1:4,][,Dataset:='UKB_afr'],B_HRS_afr[[I]][1:2,][, Dataset:='HRS_afr'],  B_HRS_eur[[I]])
                tmp<-lm(R_sq~Med_Eur_Anc,weights=1/
        c(var(results.JHS[[I]][[1]]$t), var(results.JHS[[I]][[2]]$t), var(results.WHI[[I]][[1]]$t), var(results.WHI[[I]][[2]]$t), var(results.WHI[[I]][[3]]$t), var(results.WHI[[I]][[4]]$t), var(results.UKB_afr[[I]][[1]]$t),var(results.UKB_afr[[I]][[2]]$t), var(results.UKB_afr[[I]][[3]]$t), var(results.UKB_afr[[I]][[4]]$t), var(results.HRS_afr[[I]][[1]]$t), var(results.HRS_afr[[I]][[2]]$t),var(results.HRS_eur[[I]]$t)), data=ALL3[[I]])
        }
        ALL3[[I]][,Set:=I]
        readRDS(paste0('~/height_prediction/', args[1],'/WHI/output/Nr_SNPs_WHI.Rds'))[Name==I][, Nr]->a
        readRDS(paste0('~/height_prediction/', args[1],'/ukb_afr/output/Nr_SNPs_UKB_afr.Rds'))[Name==I][, Nr]->b
        readRDS(paste0('~/height_prediction/', args[1],'/JHS/output/Nr_SNPs_JHS.Rds'))[Name==I][, Nr]->d
        readRDS(paste0('~/height_prediction/', args[1],'/HRS_eur/output/Nr_SNPs_HRS.Rds'))[Name==I][, Nr]->f
        #readRDS('Nr_SNPs_pennBB_afr.Rds')[Name==I][, Nr]->f
        #readRDS('Nr_SNPs_pennBB_eur.Rds')[Name==I][, Nr]->g
        ALL3[[I]][,Intercept:=coef(tmp)[[1]]][,Slope:=coef(tmp)[[2]]]
        ALL3[[I]][,Slope_Intercept:=sum(coef(tmp))]
       ALL3[[I]][, Nr_SNPs_WHI:=a]
        ALL3[[I]][, Nr_SNPs_UKB:=b]
        ALL3[[I]][, Nr_SNPs_JHS:=d]
        ALL3[[I]][, Nr_SNPs_HRS_eur:=f]
        ALL3[[I]][, Nr_SNPs_HRS_afr:=f]
        cat(I, ' \n')
}
do.call(rbind,ALL3)[,.(Quant,Set,Intercept,Slope_Intercept, Slope, Nr_SNPs_WHI, Nr_SNPs_UKB, R_sq, Med_Eur_Anc)]->ALL4
ALL4
ALL4[grep("phys",  ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_phys
ALL4[grep("genet", ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_genet
ALL4[grep("LD",    ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_LD
#factor(dt$Set)-> dt$Setp
factor(dt_phys$Set)-> dt_phys$Set
factor(dt_genet$Set)-> dt_genet$Set
factor(dt_LD$Set)-> dt_LD$Set
factor(dt_LD$Set, levels(dt_LD$Set)[c(4,5,3,1,2)])-> dt_LD$Set
factor(dt_genet$Set, levels(dt_genet$Set)[c(5,4,3,2,1,10,9,8,7,6,15,14,13,12,11,20,19,18,17,16,25,24,23,22,21, 30, 29, 28, 27, 26, 35,34,33,32,31)])-> dt_genet$Set
factor(dt_phys$Set, levels(dt_phys$Set)[c(24,27,30,33,35,4,7,10,13,15,16,17,18,19,20,22,25,28,31,34,36,37,38,39,40,2,5,8,11,14,21,23,26,29,32,1,3,6,9,12)])-> dt_phys$Set
melt(dt_LD)-> dt_LD
rbind(dt_LD[grep("_250000_", dt_LD$Set)][, window:=250000], dt_LD[grep("_100000_", dt_LD$Set)][, window:=100000], dt_LD[grep("_50000_", dt_LD$Set)][, window:=50000], dt_LD[grep("block", dt_LD$Set)][, window:="-"])-> dt_LD
dt_LD[, method:=gsub("LD_50000_0.01_0.5", "LD_0.01_0.5", gsub("LD_100000_0.01_0.5", "LD_0.01_0.5", gsub("LD_250000_0.01_0.5", "LD_0.01_0.5", gsub("LD_block_0_0_AFR", "LD_block_AFR", gsub("LD_block_0_0_EUR", "LD_block_EUR", dt_LD[,Set])))))]
as.factor(dt_LD$window)-> dt_LD$window
factor(dt_LD$window, levels(dt_LD$window)[c(1,4,2,3)])-> dt_LD$window
ggplot(dt_LD,aes(x=method, y=value, colour=window, shape=variable)) + geom_point(size=2.5, alpha=1) + theme(axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15), axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
ggsave('~/height_prediction/figs/reg_rsq_eur_anc_LD.png')
#
#
melt(dt_genet)->dt_genet
dt_genet[, c("method", "window","p") := tstrsplit(Set, "_")]
as.factor(dt_genet$window)-> dt_genet$window
ggplot() + geom_point(data=dt_genet,aes(x=p, y=value, colour=window, shape=variable), size=2.5, alpha = 1) + theme(axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15), axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
ggsave('~/height_prediction/figs/reg_rsq_eur_anc_genet.png')
#
#
melt(dt_phys)-> dt_phys
dt_phys[, c("method", "window","p") := tstrsplit(Set, "_")]
as.factor(dt_phys$window)-> dt_phys$window
factor(dt_phys$window, levels(dt_phys$window)[c(3,7,2,8,6,4,1,5)])-> dt_phys$window
ggplot() + geom_point(data=dt_phys,aes(x=p, y=value, colour=window, shape=variable), size=2.5, alpha = 1) + theme(axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15), axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
ggsave('~/height_prediction/figs/reg_rsq_eur_anc_phys.png')
#plot as function of Nr_SNPs
data.table(Set=unique(ALL4$Set), Nr_SNPs=unique(ALL4$Nr_SNPs_UKB))->A1
data.table(Set=unique(ALL4$Set), Nr_SNPs=unique(ALL4$Nr_SNPs_HRS))->A1
A1
ALL4[grep("phys",  ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_phys
ALL4[grep("genet", ALL4$Set),][,.(Set,Intercept,Slope,Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_genet
ALL4[grep("LD",    ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_LD
dt_LD %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_LD #remove ukb_eur
dt_phys %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_phys
dt_genet %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_genet
dt_LD
factor(dt_phys$Set)-> dt_phys$Set
factor(dt_genet$Set)-> dt_genet$Set
factor(dt_LD$Set)-> dt_LD$Set
factor(dt_LD$Set, levels(dt_LD$Set)[c(4,5,3,1,2)])-> dt_LD$Set
factor(dt_genet$Set, levels(dt_genet$Set)[c(5,4,3,2,1,10,9,8,7,6,15,14,13,12,11,20,19,18,17,16,25,24,23,22,21, 30, 29, 28, 27, 26, 35,34,33,32,31)])-> dt_genet$Set
factor(dt_phys$Set, levels(dt_phys$Set)[c(24,27,30,33,35,4,7,10,13,15,16,17,18,19,20,22,25,28,31,34,36,37,38,39,40,2,5,8,11,14,21,23,26,29,32,1,3,6,9,12)])-> dt_phys$Set
melt(dt_LD)-> dt_LD
rbind(dt_LD[grep("_250000_", dt_LD$Set)][, window:=250000], dt_LD[grep("_100000_", dt_LD$Set)][, window:=100000], dt_LD[grep("_50000_", dt_LD$Set)][, window:=50000], dt_LD[grep("block", dt_LD$Set)][, window:="-"])-> dt_LD
dt_LD[, method:=gsub("LD_50000_0.01_0.5", "LD_0.01_0.5", gsub("LD_100000_0.01_0.5", "LD_0.01_0.5", gsub("LD_250000_0.01_0.5", "LD_0.01_0.5", gsub("LD_block_0_0_AFR", "LD_block_AFR", gsub("LD_block_0_0_EUR", "LD_block_EUR", dt_LD[,Set])))))]
dt_LD
as.factor(dt_LD$window)-> dt_LD$window
factor(dt_LD$window, levels(dt_LD$window)[c(1,4,2,3)])-> dt_LD$window
setkey(dt_LD, Set)
dt_LD[A1,nomatch=0]-> dt_LD
melt(dt_phys)-> dt_phys
dt_phys[, c("method", "window","p") := tstrsplit(Set, "_")]
as.factor(dt_phys$window)-> dt_phys$window
factor(dt_phys$window, levels(dt_phys$window)[c(3,7,2,8,6,4,1,5)])-> dt_phys$window
setkey(A1, Set)
setkey(dt_phys, Set)
dt_phys[A1,nomatch=0]-> dt_phys
melt(dt_genet)->dt_genet
dt_genet[, c("method", "window","p") := tstrsplit(Set, "_")]
as.factor(dt_genet$window)-> dt_genet$window
setkey(dt_genet, Set)
dt_genet[A1,nomatch=0]-> dt_genet
dt_LD
gsub("Slope_Intercept", "Slope+Intercept",dt_phys$variable)-> dt_phys$variable
gsub("R_sq", "Partial R-squared",dt_phys$variable)-> dt_phys$variable
dt_phys[variable!="Slope"]-> dt_phys
dt_phys
plotA<-ggplot() + geom_point(data=dt_phys,aes(x=Nr_SNPs, y=value, colour=window, shape=variable), size=1.5, alpha = 0.7) +
theme(axis.title.y = element_text(size = 12), axis.title.x=element_text(size=12), axis.text.x=element_text(size=10), axis.text.y=element_text(size=10), legend.text=element_text(size=9), legend.title = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
guides(shape=FALSE,color=guide_legend(override.aes=list(shape=15))) + ylab("Value")
plotA
A1
A1[grep("phys",  ALL4$Set),]
A1
A1[grep("phys",  A1$Set),]
data.table(Set=unique(ALL4$Set), Nr_SNPs=unique(ALL4$Nr_SNPs_HRS))->A1
ALL4[grep("phys",  ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_phys
ALL4[grep("genet", ALL4$Set),][,.(Set,Intercept,Slope,Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_genet
ALL4[grep("LD",    ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_LD
dt_LD %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_LD #remove ukb_eur
dt_phys %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_phys
dt_genet %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_genet
#factor(dt$Set)-> dt$Setp
factor(dt_phys$Set)-> dt_phys$Set
factor(dt_genet$Set)-> dt_genet$Set
factor(dt_LD$Set)-> dt_LD$Set
factor(dt_LD$Set, levels(dt_LD$Set)[c(4,5,3,1,2)])-> dt_LD$Set
factor(dt_genet$Set, levels(dt_genet$Set)[c(5,4,3,2,1,10,9,8,7,6,15,14,13,12,11,20,19,18,17,16,25,24,23,22,21, 30, 29, 28, 27, 26, 35,34,33,32,31)])-> dt_genet$Set
factor(dt_phys$Set, levels(dt_phys$Set)[c(24,27,30,33,35,4,7,10,13,15,16,17,18,19,20,22,25,28,31,34,36,37,38,39,40,2,5,8,11,14,21,23,26,29,32,1,3,6,9,12)])-> dt_phys$Set
melt(dt_LD)-> dt_LD
rbind(dt_LD[grep("_250000_", dt_LD$Set)][, window:=250000], dt_LD[grep("_100000_", dt_LD$Set)][, window:=100000], dt_LD[grep("_50000_", dt_LD$Set)][, window:=50000], dt_LD[grep("block", dt_LD$Set)][, window:="-"])-> dt_LD
dt_LD[, method:=gsub("LD_50000_0.01_0.5", "LD_0.01_0.5", gsub("LD_100000_0.01_0.5", "LD_0.01_0.5", gsub("LD_250000_0.01_0.5", "LD_0.01_0.5", gsub("LD_block_0_0_AFR", "LD_block_AFR", gsub("LD_block_0_0_EUR", "LD_block_EUR", dt_LD[,Set])))))]
as.factor(dt_LD$window)-> dt_LD$window
factor(dt_LD$window, levels(dt_LD$window)[c(1,4,2,3)])-> dt_LD$window
setkey(dt_LD, Set)
bdt_LD[A1,nomatch=0]-> dt_LD
dt_LD[A1,nomatch=0]-> dt_LD
dt_LD
A1
A1[1,]
ALL4
do.call(rbind,ALL3)[,.(Quant,Set,Intercept,Slope_Intercept, Slope, Nr_SNPs_WHI, Nr_SNPs_HRS_eur, R_sq, Med_Eur_Anc)]->ALL4
#add nr of snps
ALL4[grep("phys",  ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_phys
ALL4[grep("genet", ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_genet
ALL4[grep("LD",    ALL4$Set),][,.(Set,Intercept,Slope_Intercept)]->dt_LD
#factor(dt$Set)-> dt$Setp
factor(dt_phys$Set)-> dt_phys$Set
factor(dt_genet$Set)-> dt_genet$Set
factor(dt_LD$Set)-> dt_LD$Set
factor(dt_LD$Set, levels(dt_LD$Set)[c(4,5,3,1,2)])-> dt_LD$Set
factor(dt_genet$Set, levels(dt_genet$Set)[c(5,4,3,2,1,10,9,8,7,6,15,14,13,12,11,20,19,18,17,16,25,24,23,22,21, 30, 29, 28, 27, 26, 35,34,33,32,31)])-> dt_genet$Set
factor(dt_phys$Set, levels(dt_phys$Set)[c(24,27,30,33,35,4,7,10,13,15,16,17,18,19,20,22,25,28,31,34,36,37,38,39,40,2,5,8,11,14,21,23,26,29,32,1,3,6,9,12)])-> dt_phys$Set
melt(dt_LD)-> dt_LD
rbind(dt_LD[grep("_250000_", dt_LD$Set)][, window:=250000], dt_LD[grep("_100000_", dt_LD$Set)][, window:=100000], dt_LD[grep("_50000_", dt_LD$Set)][, window:=50000], dt_LD[grep("block", dt_LD$Set)][, window:="-"])-> dt_LD
dt_LD[, method:=gsub("LD_50000_0.01_0.5", "LD_0.01_0.5", gsub("LD_100000_0.01_0.5", "LD_0.01_0.5", gsub("LD_250000_0.01_0.5", "LD_0.01_0.5", gsub("LD_block_0_0_AFR", "LD_block_AFR", gsub("LD_block_0_0_EUR", "LD_block_EUR", dt_LD[,Set])))))]
as.factor(dt_LD$window)-> dt_LD$window
factor(dt_LD$window, levels(dt_LD$window)[c(1,4,2,3)])-> dt_LD$window
ggplot(dt_LD,aes(x=method, y=value, colour=window, shape=variable)) + geom_point(size=2.5, alpha=1) + theme(axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15), axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
ggsave('~/height_prediction/figs/reg_rsq_eur_anc_LD.png')
#
#
melt(dt_genet)->dt_genet
dt_genet[, c("method", "window","p") := tstrsplit(Set, "_")]
as.factor(dt_genet$window)-> dt_genet$window
ggplot() + geom_point(data=dt_genet,aes(x=p, y=value, colour=window, shape=variable), size=2.5, alpha = 1) + theme(axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15), axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
ggsave('~/height_prediction/figs/reg_rsq_eur_anc_genet.png')
#
#
melt(dt_phys)-> dt_phys
dt_phys[, c("method", "window","p") := tstrsplit(Set, "_")]
as.factor(dt_phys$window)-> dt_phys$window
factor(dt_phys$window, levels(dt_phys$window)[c(3,7,2,8,6,4,1,5)])-> dt_phys$window
ggplot() + geom_point(data=dt_phys,aes(x=p, y=value, colour=window, shape=variable), size=2.5, alpha = 1) + theme(axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15), axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
ggsave('~/height_prediction/figs/reg_rsq_eur_anc_phys.png')
#plot as function of Nr_SNPs
data.table(Set=unique(ALL4$Set), Nr_SNPs=unique(ALL4$Nr_SNPs_HRS))->A1
A1
ALL4
data.table(Set=unique(ALL4$Set), Nr_SNPs=unique(ALL4$Nr_SNPs_HRS_eurALL4[grep("phys",  ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_phys))->A1
ALL4[grep("genet", ALL4$Set),][,.(Set,Intercept,Slope,Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_genet
ALL4[grep("LD",    ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_LD
dt_LD %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_LD #remove ukb_eur
dt_phys %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_phys
dt_genet %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_genet
#factor(dt$Set)-> dt$Setp
factor(dt_phys$Set)-> dt_phys$Set
factor(dt_genet$Set)-> dt_genet$Set
factor(dt_LD$Set)-> dt_LD$Set
factor(dt_LD$Set, levels(dt_LD$Set)[c(4,5,3,1,2)])-> dt_LD$Set
factor(dt_genet$Set, levels(dt_genet$Set)[c(5,4,3,2,1,10,9,8,7,6,15,14,13,12,11,20,19,18,17,16,25,24,23,22,21, 30, 29, 28, 27, 26, 35,34,33,32,31)])-> dt_genet$Set
factor(dt_phys$Set, levels(dt_phys$Set)[c(24,27,30,33,35,4,7,10,13,15,16,17,18,19,20,22,25,28,31,34,36,37,38,39,40,2,5,8,11,14,21,23,26,29,32,1,3,6,9,12)])-> dt_phys$Set
melt(dt_LD)-> dt_LD
rbind(dt_LD[grep("_250000_", dt_LD$Set)][, window:=250000], dt_LD[grep("_100000_", dt_LD$Set)][, window:=100000], dt_LD[grep("_50000_", dt_LD$Set)][, window:=50000], dt_LD[grep("block", dt_LD$Set)][, window:="-"])-> dt_LD
dt_LD[, method:=gsub("LD_50000_0.01_0.5", "LD_0.01_0.5", gsub("LD_100000_0.01_0.5", "LD_0.01_0.5", gsub("LD_250000_0.01_0.5", "LD_0.01_0.5", gsub("LD_block_0_0_AFR", "LD_block_AFR", gsub("LD_block_0_0_EUR", "LD_block_EUR", dt_LD[,Set])))))]
as.factor(dt_LD$window)-> dt_LD$window
factor(dt_LD$window, levels(dt_LD$window)[c(1,4,2,3)])-> dt_LD$window
setkey(dt_LD, Set)
dt_LD[A1,nomatch=0]-> dt_LD
ALL4[grep("phys",  ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_phys
ALL4[grep("genet", ALL4$Set),][,.(Set,Intercept,Slope,Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_genet
ALL4[grep("LD",    ALL4$Set),][,.(Set,Intercept,Slope, Slope_Intercept, R_sq, Med_Eur_Anc)][Med_Eur_Anc==1][, Med_Eur_Anc:=NULL]->dt_LD
dt_LD %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_LD #remove ukb_eur
dt_phys %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_phys
dt_genet %>% dplyr::group_by(Set) %>% dplyr::mutate(R_sq=min(R_sq)) %>% as.data.table-> dt_genet
#factor(dt$Set)-> dt$Setp
factor(dt_phys$Set)-> dt_phys$Set
factor(dt_genet$Set)-> dt_genet$Set
factor(dt_LD$Set)-> dt_LD$Set
factor(dt_LD$Set, levels(dt_LD$Set)[c(4,5,3,1,2)])-> dt_LD$Set
factor(dt_genet$Set, levels(dt_genet$Set)[c(5,4,3,2,1,10,9,8,7,6,15,14,13,12,11,20,19,18,17,16,25,24,23,22,21, 30, 29, 28, 27, 26, 35,34,33,32,31)])-> dt_genet$Set
factor(dt_phys$Set, levels(dt_phys$Set)[c(24,27,30,33,35,4,7,10,13,15,16,17,18,19,20,22,25,28,31,34,36,37,38,39,40,2,5,8,11,14,21,23,26,29,32,1,3,6,9,12)])-> dt_phys$Set
melt(dt_LD)-> dt_LD
rbind(dt_LD[grep("_250000_", dt_LD$Set)][, window:=250000], dt_LD[grep("_100000_", dt_LD$Set)][, window:=100000], dt_LD[grep("_50000_", dt_LD$Set)][, window:=50000], dt_LD[grep("block", dt_LD$Set)][, window:="-"])-> dt_LD
dt_LD[, method:=gsub("LD_50000_0.01_0.5", "LD_0.01_0.5", gsub("LD_100000_0.01_0.5", "LD_0.01_0.5", gsub("LD_250000_0.01_0.5", "LD_0.01_0.5", gsub("LD_block_0_0_AFR", "LD_block_AFR", gsub("LD_block_0_0_EUR", "LD_block_EUR", dt_LD[,Set])))))]
as.factor(dt_LD$window)-> dt_LD$window
factor(dt_LD$window, levels(dt_LD$window)[c(1,4,2,3)])-> dt_LD$window
setkey(dt_LD, Set)
dt_LD[A1,nomatch=0]-> dt_LD
dt_LD
melt(dt_phys)-> dt_phys
dt_phys[, c("method", "window","p") := tstrsplit(Set, "_")]
as.factor(dt_phys$window)-> dt_phys$window
factor(dt_phys$window, levels(dt_phys$window)[c(3,7,2,8,6,4,1,5)])-> dt_phys$window
setkey(A1, Set)
setkey(dt_phys, Set)
dt_phys[A1,nomatch=0]-> dt_phys
melt(dt_genet)->dt_genet
dt_genet[, c("method", "window","p") := tstrsplit(Set, "_")]
as.factor(dt_genet$window)-> dt_genet$window
setkey(dt_genet, Set)
dt_genet[A1,nomatch=0]-> dt_genet
#
gsub("Slope_Intercept", "Slope+Intercept",dt_phys$variable)-> dt_phys$variable
gsub("R_sq", "Partial R-squared",dt_phys$variable)-> dt_phys$variable
dt_phys[variable!="Slope"]-> dt_phys
plotA<-ggplot() + geom_point(data=dt_phys,aes(x=Nr_SNPs, y=value, colour=window, shape=variable), size=1.5, alpha = 0.7) +
theme(axis.title.y = element_text(size = 12), axis.title.x=element_text(size=12), axis.text.x=element_text(size=10), axis.text.y=element_text(size=10), legend.text=element_text(size=9), legend.title = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
guides(shape=FALSE,color=guide_legend(override.aes=list(shape=15))) + ylab("Value")
#ggsave('~/height_prediction/figs/reg_rsq_eur_anc_phys_v2.png')
gsub("Slope_Intercept", "Slope+Intercept",dt_genet$variable)-> dt_genet$variable
gsub("R_sq", "Partial R-squared",dt_genet$variable)-> dt_genet$variable
dt_genet[variable!="Slope"]-> dt_genet
plotB<-ggplot() + geom_point(data=dt_genet,aes(x=Nr_SNPs, y=value, colour=window, shape=variable), size=1.5, alpha = 0.7) +
theme(axis.title.y = element_text(size = 12), axis.title.x=element_text(size=12), axis.text.x=element_text(size=10), axis.text.y=element_text(size=10), legend.text=element_text(size=9), legend.title = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
guides(color=guide_legend(override.aes=list(shape=15))) + ylab("Value")
#ggsave('~/height_prediction/figs/reg_rsq_eur_anc_genet_v2.png')
gsub("Slope_Intercept", "Slope+Intercept",dt_LD$variable)-> dt_LD$variable
gsub("R_sq", "Partial R-squared",dt_LD$variable)-> dt_LD$variable
dt_LD[variable!="Slope"]-> dt_LD
plotC<-ggplot() + geom_point(data=dt_LD,aes(x=Nr_SNPs, y=value, colour=Set, shape=variable), size=1.5, alpha = 0.7) +
theme(axis.title.y = element_text(size = 12), axis.title.x=element_text(size=12), axis.text.x=element_text(size=10), axis.text.y=element_text(size=10), legend.text=element_text(size=9), legend.title = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + guides(shape=FALSE,color=guide_legend(override.aes=list(shape=15)))  + ylab("Value")
#ggsave('~/height_prediction/figs/reg_rsq_eur_anc_LD_v2.png')
png('~/height_prediction/figs/panel_Nr_snps.png', units="in", height=11, width=7, res=600)
plot_grid(plotC, plotB,plotA,  labels = c("A", "B", "C"), nrow=3, align="v")
dev.off()
#try to use just one plot
dt_LD[, p:=0.01]
dt_LD[, .(Set, variable, value, method, window,p, Nr_SNPs)]-> dt_LD
rbind(dt_phys,dt_genet, dt_LD)-> dt
dt_LD
dt_LD[,.(Nr_SNPs, Set)]
dt_phys[,.(Nr_SNPs, Set)]
dt_phys[,.(Nr_SNPs, Set)][1:10]
dt_phys[,.(Nr_SNPs, Set)][1:20]
dt_phys[,.(Nr_SNPs, Set)][1:25]
dt_phys[,.(Nr_SNPs, Set)][1:35]
dt_LD[,.(Nr_SNPs, Set)]
7117/62903
62903/7117
dt_LD[,.(Nr_SNPs, Set, Part_R2)]
dt_LD
dt_LD[1,]
dt_LD[,.(Nr_SNPs, Set, Part_R2, variable, value)]
dt_LD[,.(Nr_SNPs, Set, variable, value)]
dt_LD[variable=='Partial R-squared'][,.(Nr_SNPs, Set, variable, value)]
dt_phys[variable=='Partial R-squared'][,.(Nr_SNPs, Set, variable, value)]
arrange(dt_phys[variable=='Partial R-squared'][,.(Nr_SNPs, Set, variable, value)], value)
arrange(dt_genet[variable=='Partial R-squared'][,.(Nr_SNPs, Set, variable, value)], value)
arrange(dt_phys[variable=='Partial R-squared'][,.(Nr_SNPs, Set, variable, value)], value)
arrange(dt_LD[variable=='Partial R-squared'][,.(Nr_SNPs, Set, variable, value)], value)
69298/1706
69298/2586
59266/2586
