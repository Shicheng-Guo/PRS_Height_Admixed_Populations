#####################################################################################################
#### First part: calculate recombination rates for PRS SNPs and divide them into quantiles ##########
#####################################################################################################
## Read in betas and recombination maps
rate.dist<-as.numeric(args[1])
w_map<-args[2]
PRS<-vector('list', 22)
#eur<-fread('/project/mathilab/bbita/gwas_admix/new_height/ukb_eur_betas_100000_0.0005.txt') #need to fix this path
#CHR,POS,MarkerName,i.MarkerName,REF,ALT,Allele1,Allele2,b,SE,p,N
eur<-do.call(rbind, readRDS(paste0('~/height_prediction/', args[3], '/HRS_eur/output/hei_phys_100000_0.0005_v2.Rds')))[,.(CHR,POS,MarkerName,i.MarkerName,REF,ALT,Allele1,Allele2,b,p)]
lapply(1:22, function(chr) fread(paste0('zcat /project/mathilab/data/maps/hm2/hm2/genetic_map_GRCh37_chr', chr,'.txt.gz'))[,CHR:=gsub("chr","",Chromosome)][, Chromosome:=NULL])-> rec #need to fix this path
for(chr in 1:22){colnames(rec[[chr]])<-c('POS', 'RATE_cM_Mb', 'MAP_cM', 'CHR')}
lapply(1:22, function(chr) fread(paste0('zcat /project/mathilab/data/maps_b37/maps_chr.', chr, '.gz')))-> maps #need to fix this path
for(chr in 1:22){colnames(maps[[chr]])[1]<-"POS"}
lapply(1:22, function(chr) setkey(rec[[chr]],POS))
lapply(1:22, function(chr) setkey(maps[[chr]],POS))
lapply(1:22, function(chr) maps[[chr]][rec[[chr]], nomatch=0])-> map
lapply(1:22, function(chr) map[[chr]][,POS2:=POS])
remove(maps)
cat('loading done\n')
chrs<-vector('list',22)
for (chr in 22:1){
        cat('starting chr', chr, '\n')
        a<-seq(from=map[[chr]]$POS[1]-(rate.dist/2), to=map[[chr]]$POS[nrow(map[[chr]])], by=rate.dist)
        b<-c(a[-1],a[length(a)]+rate.dist)
        if(w_map=="AA"){
                AA.rate <- approxfun(map[[chr]]$POS, map[[chr]]$AA_Map, rule=2)
                e<-data.table(POS=a, POS2=b, Win=paste0(a,"|",b))
                setkey(e, POS, POS2)
                setkey(map[[chr]], POS, POS2)
                f<-foverlaps(map[[chr]], e)
                f[, diff:=AA.rate(f$POS2)-AA.rate(f$POS)][,CHR:=chr]
                chrs[[chr]]<-f
                } else if (w_map=="CEU"){
                CEU.rate<-approxfun(map[[chr]]$POS, map[[chr]]$CEU_LD, rule=2)
                e<-data.table(POS=a, POS2=b, Win=paste0(a,"|",b))
                setkey(e, POS, POS2)
                setkey(map[[chr]], POS, POS2)
                f<-foverlaps(map[[chr]], e)
                f[, diff:=CEU.rate(f$POS2)-CEU.rate(f$POS)][,CHR:=chr]
                chrs[[chr]]<-f
                }
}
do.call(rbind, chrs)-> f  #combine into one data.table with all chromosomes
f[,Quantile:=cut(diff, breaks=quantile(diff), na.rm=T, include.lowest=T)]
eur[, POS1:=POS-(rate.dist/2)][,POS2:=POS+(rate.dist/2)]
#Stratify genome into 4 quantiles of recombination rate
if(w_map=="CEU"){
        eur[, diff:=CEU.rate(POS2)-CEU.rate(POS1), by=CHR]
        } else if (w_map=="AA"){
         eur[, diff:=AA.rate(POS2)-AA.rate(POS1), by=CHR]
}
eur[,Quantile:=cut(diff, breaks=quantile(diff), na.rm=T, include.lowest=T)]
q1<-split(eur, by='Quantile')[[1]]
q2<-split(eur, by='Quantile')[[2]]
q3<-split(eur, by='Quantile')[[3]]
q4<-split(eur, by='Quantile')[[4]]
cat('checkpoint\n')
#calculate PRS for each of these quantiles
hei<-lapply(1:22, function(chr) readRDS(paste0('~/height_prediction/',args[3],'/HRS_eur/output/hei_phys_100000_0.0005_v2.Rds'))[[chr]])
hei<-do.call(rbind, hei)
hei[MarkerName %in% q1$MarkerName]-> hei_q1
hei[MarkerName %in% q2$MarkerName]-> hei_q2
hei[MarkerName %in% q3$MarkerName]-> hei_q3
hei[MarkerName %in% q4$MarkerName]-> hei_q4
prs<-vector('list', 4)
names(prs)<-c("q1","q2","q3", "q4")
prs[['q1']]<-PolScore2(hei2=hei_q1)
cat('q1 done\n')
prs[['q2']]<-PolScore2(hei2=hei_q2)
cat('q2 done\n')
prs[['q3']]<-PolScore2(hei2=hei_q3)
cat('q3 done\n')
prs[['q4']]<-PolScore2(hei2=hei_q4)
cat('q4 done\n')
PRS<-prs
remove(prs)
saveRDS(PRS,file=paste0("~/height_prediction/strat_prs/output/prs_HRS_eur_", args[3], '_', rate.dist, "_", w_map, "_v2.Rds")) #store results
obj<-c(nrow(hei_q1), nrow(hei_q2), nrow(hei_q3), nrow(hei_q4))
saveRDS(obj, file=paste0("~/height_prediction/strat_prs/output/Nr_SNPs_HRS_eur_", args[3], '_',rate.dist, "_", w_map, "_v2.Rds")) #store results
#Make a list
PRS2<-vector('list', length(PRS[['q1']]))
names(PRS2)<-names(PRS[['q1']])
for(J in names(PRS2)){
        PRS2[[J]]<-data.table(q1=PRS[['q1']][[J]],q2=PRS[['q2']][[J]],q3=PRS[['q3']][[J]], q4=PRS[['q4']][[J]])
        cat(J, '\r')
}
do.call(rbind,PRS2)-> PRS2 #combine into one data.table
rownames(PRS2)<-names(PRS[[1]])
saveRDS(PRS2, file=paste0('~/height_prediction/strat_prs//output/PRS2_HRS_eur_',args[3], '_', rate.dist,"_", w_map, '_v2.Rds')) #store results
#read in phenotype data
fread('~/height_prediction/input/HRS_eur/HRS_EUR_phenotypes.txt')-> Pheno_HRS_eur #need to fix this path
#fix some columns and set keys for merging data tables
Pheno_HRS_eur[,ID:=paste0(ID, "_", ID)]
setkey(Pheno_HRS_eur, ID)
PGS2_HRS_eur<-vector('list', 4)
names(PGS2_HRS_eur)<-c("q1","q2","q3","q4")
for (I in names(PGS2_HRS_eur)){
        data.table(ID=rownames(PRS2), PGS=PRS2[,get(I)])-> PGS2_HRS_eur[[I]]
        setkey(PGS2_HRS_eur[[I]], ID)
        PGS2_HRS_eur[[I]][Pheno_HRS_eur, nomatch=0]-> PGS2_HRS_eur[[I]]
 #       PGS2_HRS_eur[[I]][anc_UKB_eur, nomatch=0]-> PGS2_UKB_eur[[I]]
        PGS2_HRS_eur[[I]][,AGE2:=AGE^2]
        PGS2_HRS_eur[[I]][,HEIGHT:=HEIGHT*100]
        PGS2_HRS_eur[[I]][,EUR_ANC:=1]
}
#run linear models
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~SEX, X))-> lm0_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~PGS, X))-> lm1_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~AGE, X))-> lm2_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~AGE2, X))-> lm3_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~EUR_ANC, X))-> lm4_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~PGS+AGE, X))-> lm5_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~PGS+AGE2, X))-> lm6_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~SEX+AGE+AGE2, X))-> lm7_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~SEX+AGE+AGE2+PGS, X))-> lm8_HRS_eur
#Get partial R2, i.e, the proportion of variation in height explained by the PRS
partial_r2_HRS_eur<-lapply(1:length(PGS2_HRS_eur), function(X) partial.R2(lm7_HRS_eur[[X]], lm8_HRS_eur[[X]]))
names(partial_r2_HRS_eur)<- names(PGS2_HRS_eur)
saveRDS(partial_r2_HRS_eur,file=paste0('~/height_prediction/strat_prs/output/part_R2_HRS_eur_', args[3], '_',rate.dist,  "_", w_map, '_v2.Rds')) #store results
args
args[1]
args[1]<-20000
home<-"/home/bbita"
dir<-"height_prediction/strat_prs/scripts"
source(paste0(home, "/", dir,'/PRS_calc.R'))
#partial R2 function
source(paste0(home, "/", dir,'/Rsq_R2.R'))
########################################
#####################################################################################################
#### First part: calculate recombination rates for PRS SNPs and divide them into quantiles ##########
#####################################################################################################
## Read in betas and recombination maps
rate.dist<-as.numeric(args[1])
w_map<-args[2]
PRS<-vector('list', 22)
#eur<-fread('/project/mathilab/bbita/gwas_admix/new_height/ukb_eur_betas_100000_0.0005.txt') #need to fix this path
#CHR,POS,MarkerName,i.MarkerName,REF,ALT,Allele1,Allele2,b,SE,p,N
eur<-do.call(rbind, readRDS(paste0('~/height_prediction/', args[3], '/HRS_eur/output/hei_phys_100000_0.0005_v2.Rds')))[,.(CHR,POS,MarkerName,i.MarkerName,REF,ALT,Allele1,Allele2,b,p)]
lapply(1:22, function(chr) fread(paste0('zcat /project/mathilab/data/maps/hm2/hm2/genetic_map_GRCh37_chr', chr,'.txt.gz'))[,CHR:=gsub("chr","",Chromosome)][, Chromosome:=NULL])-> rec #need to fix this path
for(chr in 1:22){colnames(rec[[chr]])<-c('POS', 'RATE_cM_Mb', 'MAP_cM', 'CHR')}
lapply(1:22, function(chr) fread(paste0('zcat /project/mathilab/data/maps_b37/maps_chr.', chr, '.gz')))-> maps #need to fix this path
for(chr in 1:22){colnames(maps[[chr]])[1]<-"POS"}
lapply(1:22, function(chr) setkey(rec[[chr]],POS))
lapply(1:22, function(chr) setkey(maps[[chr]],POS))
lapply(1:22, function(chr) maps[[chr]][rec[[chr]], nomatch=0])-> map
lapply(1:22, function(chr) map[[chr]][,POS2:=POS])
remove(maps)
cat('loading done\n')
chrs<-vector('list',22)
for (chr in 22:1){
        cat('starting chr', chr, '\n')
        a<-seq(from=map[[chr]]$POS[1]-(rate.dist/2), to=map[[chr]]$POS[nrow(map[[chr]])], by=rate.dist)
        b<-c(a[-1],a[length(a)]+rate.dist)
        if(w_map=="AA"){
                AA.rate <- approxfun(map[[chr]]$POS, map[[chr]]$AA_Map, rule=2)
                e<-data.table(POS=a, POS2=b, Win=paste0(a,"|",b))
                setkey(e, POS, POS2)
                setkey(map[[chr]], POS, POS2)
                f<-foverlaps(map[[chr]], e)
                f[, diff:=AA.rate(f$POS2)-AA.rate(f$POS)][,CHR:=chr]
                chrs[[chr]]<-f
                } else if (w_map=="CEU"){
                CEU.rate<-approxfun(map[[chr]]$POS, map[[chr]]$CEU_LD, rule=2)
                e<-data.table(POS=a, POS2=b, Win=paste0(a,"|",b))
                setkey(e, POS, POS2)
                setkey(map[[chr]], POS, POS2)
                f<-foverlaps(map[[chr]], e)
                f[, diff:=CEU.rate(f$POS2)-CEU.rate(f$POS)][,CHR:=chr]
                chrs[[chr]]<-f
                }
}
do.call(rbind, chrs)-> f  #combine into one data.table with all chromosomes
f[,Quantile:=cut(diff, breaks=quantile(diff), na.rm=T, include.lowest=T)]
eur[, POS1:=POS-(rate.dist/2)][,POS2:=POS+(rate.dist/2)]
#Stratify genome into 4 quantiles of recombination rate
if(w_map=="CEU"){
        eur[, diff:=CEU.rate(POS2)-CEU.rate(POS1), by=CHR]
        } else if (w_map=="AA"){
         eur[, diff:=AA.rate(POS2)-AA.rate(POS1), by=CHR]
}
eur[,Quantile:=cut(diff, breaks=quantile(diff), na.rm=T, include.lowest=T)]
eur
eur[,Quantile:=cut(diff, breaks=quantile(diff), na.rm=T, include.lowest=T)]
q1<-split(eur, by='Quantile')[[1]]
q2<-split(eur, by='Quantile')[[2]]
q3<-split(eur, by='Quantile')[[3]]
q4<-split(eur, by='Quantile')[[4]]
cat('checkpoint\n')
#calculate PRS for each of these quantiles
hei<-lapply(1:22, function(chr) readRDS(paste0('~/height_prediction/',args[3],'/HRS_eur/output/hei_phys_100000_0.0005_v2.Rds'))[[chr]])
hei<-do.call(rbind, hei)
hei[MarkerName %in% q1$MarkerName]-> hei_q1
hei[MarkerName %in% q2$MarkerName]-> hei_q2
hei[MarkerName %in% q3$MarkerName]-> hei_q3
hei[MarkerName %in% q4$MarkerName]-> hei_q4
prs<-vector('list', 4)
names(prs)<-c("q1","q2","q3", "q4")
prs[['q1']]<-PolScore2(hei2=hei_q1)
cat('q1 done\n')
prs[['q2']]<-PolScore2(hei2=hei_q2)
cat('q2 done\n')
prs[['q3']]<-PolScore2(hei2=hei_q3)
cat('q3 done\n')
prs[['q4']]<-PolScore2(hei2=hei_q4)
cat('q4 done\n')
PRS<-prs
remove(prs)
saveRDS(PRS,file=paste0("~/height_prediction/strat_prs/output/prs_HRS_eur_", args[3], '_', rate.dist, "_", w_map, "_v2.Rds")) #store results
obj<-c(nrow(hei_q1), nrow(hei_q2), nrow(hei_q3), nrow(hei_q4))
saveRDS(obj, file=paste0("~/height_prediction/strat_prs/output/Nr_SNPs_HRS_eur_", args[3], '_',rate.dist, "_", w_map, "_v2.Rds")) #store results
#Make a list
PRS2<-vector('list', length(PRS[['q1']]))
names(PRS2)<-names(PRS[['q1']])
for(J in names(PRS2)){
        PRS2[[J]]<-data.table(q1=PRS[['q1']][[J]],q2=PRS[['q2']][[J]],q3=PRS[['q3']][[J]], q4=PRS[['q4']][[J]])
        cat(J, '\r')
}
do.call(rbind,PRS2)-> PRS2 #combine into one data.table
rownames(PRS2)<-names(PRS[[1]])
saveRDS(PRS2, file=paste0('~/height_prediction/strat_prs//output/PRS2_HRS_eur_',args[3], '_', rate.dist,"_", w_map, '_v2.Rds')) #store results
#read in phenotype data
fread('~/height_prediction/input/HRS_eur/HRS_EUR_phenotypes.txt')-> Pheno_HRS_eur #need to fix this path
#fix some columns and set keys for merging data tables
Pheno_HRS_eur[,ID:=paste0(ID, "_", ID)]
setkey(Pheno_HRS_eur, ID)
PGS2_HRS_eur<-vector('list', 4)
names(PGS2_HRS_eur)<-c("q1","q2","q3","q4")
for (I in names(PGS2_HRS_eur)){
        data.table(ID=rownames(PRS2), PGS=PRS2[,get(I)])-> PGS2_HRS_eur[[I]]
        setkey(PGS2_HRS_eur[[I]], ID)
        PGS2_HRS_eur[[I]][Pheno_HRS_eur, nomatch=0]-> PGS2_HRS_eur[[I]]
 #       PGS2_HRS_eur[[I]][anc_UKB_eur, nomatch=0]-> PGS2_UKB_eur[[I]]
        PGS2_HRS_eur[[I]][,AGE2:=AGE^2]
        PGS2_HRS_eur[[I]][,HEIGHT:=HEIGHT*100]
        PGS2_HRS_eur[[I]][,EUR_ANC:=1]
}
#run linear models
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~SEX, X))-> lm0_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~PGS, X))-> lm1_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~AGE, X))-> lm2_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~AGE2, X))-> lm3_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~EUR_ANC, X))-> lm4_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~PGS+AGE, X))-> lm5_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~PGS+AGE2, X))-> lm6_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~SEX+AGE+AGE2, X))-> lm7_HRS_eur
lapply(PGS2_HRS_eur, function(X) lm(HEIGHT~SEX+AGE+AGE2+PGS, X))-> lm8_HRS_eur
#Get partial R2, i.e, the proportion of variation in height explained by the PRS
partial_r2_HRS_eur<-lapply(1:length(PGS2_HRS_eur), function(X) partial.R2(lm7_HRS_eur[[X]], lm8_HRS_eur[[X]]))
names(partial_r2_HRS_eur)<- names(PGS2_HRS_eur)
saveRDS(partial_r2_HRS_eur,file=paste0('~/height_prediction/strat_prs/output/part_R2_HRS_eur_', args[3], '_',rate.dist,  "_", w_map, '_v2.Rds')) #store results
library(ggplot2)
library(reshape2)
library(data.table)
library(reshape)
library(RColorBrewer)
library(MASS)
library(cowplot)
options(scipen=999)
args<-'gwas'
dtset<-args[1]
source('~/height_prediction/strat_prs/scripts/fancy_scientific.R')
a_list<-vector('list', 2)
names(a_list)<-c("AA","CEU")
a_list[['AA']]<-vector('list', 5)
a_list[['CEU']]<-vector('list', 5)
names(a_list[['AA']])<-c("HRS_eur","JHS","WHI", "ukb_afr", "HRS_afr")
names(a_list[['CEU']])<-c("HRS_eur","JHS","WHI","ukb_afr", "HRS_afr")
for(I in c("WHI","JHS","ukb_afr","HRS_eur", "HRS_afr")){
        a_list[['AA']][[I]]<-vector('list', 6)
        a_list[['CEU']][[I]]<-vector('list', 6)
        names(a_list[['AA']][[I]])<-c("3000","6000","10000","20000", "40000", "100000")
        names(a_list[['CEU']][[I]])<-c("3000","6000","10000","20000","40000","100000")
        for(J in names(a_list[['AA']][[I]])){
                a_list[['AA']][[I]][[J]]<-readRDS(paste0('~/height_prediction/strat_prs/output/part_R2_', I,"_",dtset, "_", J, "_AA_v2.Rds"))
                a_list[['CEU']][[I]][[J]]<-readRDS(paste0('~/height_prediction/strat_prs/output/part_R2_', I, "_", dtset,"_", J, "_CEU_v2.Rds"))
        }
}
library(ggplot2)
library(reshape2)
library(data.table)
library(reshape)
library(RColorBrewer)
library(MASS)
library(cowplot)
options(scipen=999)
args<-'gwas'
dtset<-args[1]
source('~/height_prediction/strat_prs/scripts/fancy_scientific.R')
a_list<-vector('list', 2)
names(a_list)<-c("AA","CEU")
a_list[['AA']]<-vector('list', 5)
a_list[['CEU']]<-vector('list', 5)
names(a_list[['AA']])<-c("HRS_eur","JHS","WHI", "ukb_afr", "HRS_afr")
names(a_list[['CEU']])<-c("HRS_eur","JHS","WHI","ukb_afr", "HRS_afr")
for(I in c("WHI","JHS","ukb_afr","HRS_eur", "HRS_afr")){
        a_list[['AA']][[I]]<-vector('list', 6)
        a_list[['CEU']][[I]]<-vector('list', 6)
        names(a_list[['AA']][[I]])<-c("3000","6000","10000","20000", "40000", "100000")
        names(a_list[['CEU']][[I]])<-c("3000","6000","10000","20000","40000","100000")
        for(J in names(a_list[['AA']][[I]])){
                a_list[['AA']][[I]][[J]]<-readRDS(paste0('~/height_prediction/strat_prs/output/part_R2_', I,"_",dtset, "_", J, "_AA_v2.Rds"))
                a_list[['CEU']][[I]][[J]]<-readRDS(paste0('~/height_prediction/strat_prs/output/part_R2_', I, "_", dtset,"_", J, "_CEU_v2.Rds"))
        }
}
if(dtset=='gwas'){
        r2_vec<-c(0.1210222,0.03910431,0.04100905,0.03776804,0.02376103)
} else if (dtset=='sib_betas'){
        r2_vec<-c(0.07511196,0.00967814,0.01993696,0.02717107,0.01060191)
}
df1<-data.table(Quantile=rep(c("q1","q2","q3","q4"),6),
Win=c(rep(3000, 4), rep(6000,4), rep(10000,4), rep(20000,4), rep(40000,4), rep(100000,4)),
HRS_eur=unlist(a_list[['AA']])[1:24]/r2_vec[1], #updated
JHS_afr=unlist(a_list[['AA']])[25:48]/r2_vec[2], #updated
WHI_afr=unlist(a_list[['AA']])[49:72]/r2_vec[3], #updated
UKB_afr=unlist(a_list[['AA']])[73:96]/r2_vec[4], #updated
HRS_afr=unlist(a_list[['AA']])[97:120]/r2_vec[5] #updaed
)
df3<-data.table(Quantile=rep(c("q1","q2","q3","q4"),6),
Win=c(rep(3000,4), rep(6000,4), rep(10000,4), rep(20000,4), rep(40000,4), rep(100000,4)),
HRS_eur=unlist(a_list[['CEU']])[1:24]/r2_vec[1], #updated
JHS_afr=unlist(a_list[['CEU']])[25:48]/r2_vec[2], #updated
WHI_afr=unlist(a_list[['CEU']])[49:72]/r2_vec[3], #updated
UKB_afr=unlist(a_list[['CEU']])[73:96]/r2_vec[4], #updated
HRS_afr=unlist(a_list[['CEU']])[97:120]/r2_vec[5] #updaed
)
df1[, Map:='AA_Map']
df3[, Map:='CEU_Map']
df4<-rbind(df1,df3)
melt(df4, id=c("Quantile","Win", "Map"))-> df5
df5$variable<-factor(df5$variable, levels=c("UKB_afr", "WHI_afr", "JHS_afr", "HRS_afr",  "HRS_eur"))
plot1<-ggplot(df5[Win==40000], aes(x=Quantile, y=value, fill=variable)) +
geom_bar(stat='identity', position='dodge', alpha=0.8) +
facet_grid(. ~Map) +
labs(y=expression(paste("Relative partial R"^"2")),x="cM") +
scale_fill_manual(values=c(brewer.pal(4, 'Set1'),"#101010")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position = "bottom", legend.title=element_blank(), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.text=element_text(size=12)) + scale_x_discrete(labels=c("Low", expression(symbol('\256')), expression(symbol('\256')), "High"))
print(plot1)
ggsave(paste0('~/height_prediction/strat_prs/figs/v2_barplot_AA_CEU_', dtset,'.pdf'))
df1<-data.table(Quantile=rep(c("q1","q2","q3","q4"),3),
Win=c(rep(3000,4), rep(6000,4), rep(10000,4),rep(20000,4), rep(40000,4), rep(100000,4)),
HRS_eur=unlist(a_list[['AA']])[1:24]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_eur_',dtset, '_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_eur_', dtset, '_40000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_eur_', dtset, '_100000_AA_v2.Rds'))),
JHS_afr=unlist(a_list[['AA']])[25:48]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_JHS_', dtset, '_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_JHS_', dtset, '_40000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_JHS_', dtset,'_100000_AA_v2.Rds'))),
WHI_afr=unlist(a_list[['AA']])[49:72]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_WHI_', dtset, '_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_WHI_', dtset, '_40000_AA_v2.Rds')), readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_WHI_',dtset,'_100000_AA_v2.Rds'))),
UKB_afr=unlist(a_list[['AA']])[73:96]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_ukb_afr_', dtset,'_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_ukb_afr_', dtset, '_40000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_ukb_afr_',dtset,'_100000_AA_v2.Rds'))),
HRS_afr=unlist(a_list[['AA']])[97:120]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_afr_',dtset,'_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_afr_', dtset, '_40000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_afr_', dtset,'_100000_AA_v2.Rds')))
)
df3<-data.table(Quantile=rep(c("q1","q2","q3","q4"),3),
Win=c(rep(3000,4), rep(6000,4), rep(10000,4), rep(20000,4), rep(40000,4), rep(100000,4)),
HRS_eur=unlist(a_list[['CEU']])[1:24]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_eur_',dtset, '_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_eur_', dtset, '_40000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_eur_', dtset, '_100000_AA_v2.Rds'))),
JHS_afr=unlist(a_list[['CEU']])[25:48]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_JHS_', dtset, '_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_JHS_', dtset, '_40000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_JHS_', dtset,'_100000_AA_v2.Rds'))),
WHI_afr=unlist(a_list[['CEU']])[49:72]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_WHI_', dtset, '_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_WHI_', dtset, '_40000_AA_v2.Rds')), readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_WHI_',dtset,'_100000_AA_v2.Rds'))),
UKB_afr=unlist(a_list[['CEU']])[73:96]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_ukb_afr_', dtset,'_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_ukb_afr_', dtset, '_40000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_ukb_afr_',dtset,'_100000_AA_v2.Rds'))),
HRS_afr=unlist(a_list[['CEU']])[97:120]/c(readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_afr_',dtset,'_20000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_afr_', dtset, '_40000_AA_v2.Rds')),readRDS(paste0('~/height_prediction/strat_prs/output/Nr_SNPs_HRS_afr_', dtset,'_100000_AA_v2.Rds')))
)
df1[, Map:='AA_Map']
df3[, Map:='CEU_Map']
df4<-rbind(df1,df3)
melt(df4, id=c("Quantile","Win","Map"))-> df5
df5$variable<-factor(df5$variable, levels=c("UKB_afr", "WHI_afr", "JHS_afr", "HRS_afr",  "HRS_eur"))
plot2<-ggplot(df5[Win==3000], aes(x=Quantile, y=value, fill=variable)) +  scale_y_continuous(labels=fancy_scientific) +
geom_bar(stat='identity', position='dodge', alpha=0.8) + facet_grid(. ~Map) + labs(y=expression('Partial R'^2*'/Number of SNPs'), x="cM") +
scale_fill_manual(values=c(brewer.pal(4, 'Set1'),"#101010")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position='bottom', legend.title=element_blank(), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.text=element_text(size=12)) + scale_x_discrete(labels=c("Low", expression(symbol('\256')), expression(symbol('\256')), "High"))
print(plot2)
ggsave(paste0('~/height_prediction/strat_prs/figs/v2_barplot_AA_CEU_v2_', dtset,'.pdf'))
###
plot_grid(plot1, plot2,labels = c("A", "B"), nrow=2, align="v")
ggsave(paste0('~/height_prediction/strat_prs/figs/v2_barplot_ALL_',dtset,'.pdf'))
if(dtset=='gwas'){
        beta<-readRDS(paste0('~/height_prediction/', dtset, '/ukb_afr/output/betas_phys_100000_0.0005_20000.Rds'))  #THIS NEEDS TO BE PLINK EFFECT SIZES NEED TO FIX
} else {
        beta<-do.call(rbind, readRDS(paste0('~/height_prediction/', dtset, '/ukb_afr/output/betas_phys_100000_0.0005_20000.Rds')))
}
as.numeric(beta1$CHR)->beta1$CHR
as.numeric(beta$CHR)->beta$CHR
setkey(beta,CHR, POS)
setkey(beta1,CHR, POS)
beta[beta1,]-> beta
beta[,Quantile:=cut(AA.rate, breaks=quantile(AA.rate, probs=seq(0,1, by=0.05), na.rm=T), include.lowest=T)]
beta[, MeanBetaDiffChisq:=mean(Beta_Diff_Chisq, na.rm=T), by=Quantile]
beta[, MedianRecRate:=median(AA.rate, na.rm=T), by=Quantile]
plot3<-ggplot(beta, aes(x=AA.rate, y=Beta_Diff_Chisq)) + geom_point(cex=0.5, col='light gray') + geom_smooth(method='lm', se=F, lwd=1, col="black") + labs(y=expression(chi^2), x="cM (AA_Map)") + geom_point(aes(x=MedianRecRate, y=MeanBetaDiffChisq, col="red"), cex=0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position = "none", legend.title=element_blank(), axis.title.y = element_text(size = 15), axis.title.x=element_text(size=15),axis.text.x=element_text(size=12), axis.text.y=element_text(size=12), legend.text=element_text(size=12))
if(dtset=='gwas'){
        beta<-readRDS(paste0('~/height_prediction/', dtset, '/ukb_afr/output/betas_phys_100000_0.0005_20000.Rds'))  #THIS NEEDS TO BE PLINK EFFECT SIZES NEED TO FIX
} else {
        beta<-do.call(rbind, readRDS(paste0('~/height_prediction/', dtset, '/ukb_afr/output/betas_phys_100000_0.0005_20000.Rds')))
}
beta
beta[1,]
readRDS('~/height_prediction/loc_anc_analysis/output/final_plink.Rds')
beta
remove(beta)
remove(beta)
beta
 beta<-readRDS('~/height_prediction/loc_anc_analysis/output/final_plink.Rds')
readRDS('~/height_prediction/gwas/ukb_afr/output/hei_phys_100000_0.0005_v2.Rds')
library(dplyr)
select(readRDS('~/height_prediction/gwas/ukb_afr/output/hei_phys_100000_0.0005_v2.Rds'), CHR, POS, MarkerName) %>% as.data.table
colnames(readRDS('~/height_prediction/gwas/ukb_afr/output/hei_phys_100000_0.0005_v2.Rds'))
colnames(do.call(rbind,readRDS('~/height_prediction/gwas/ukb_afr/output/hei_phys_100000_0.0005_v2.Rds')))
select(colnames(do.call(rbind,readRDS('~/height_prediction/gwas/ukb_afr/output/hei_phys_100000_0.0005_v2.Rds'))), CHR, POS, b, MarkerNAme, Allele1, i.MarkerName) %>% as.data.table-> beta
select(do.call(rbind,readRDS('~/height_prediction/gwas/ukb_afr/output/hei_phys_100000_0.0005_v2.Rds')), CHR, POS, b, MarkerNAme, Allele1, i.MarkerName) %>% as.data.table-> beta
 beta<-select(do.call(rbind,readRDS('~/height_prediction/gwas/ukb_afr/output/hei_phys_100000_0.0005_v2.Rds')), CHR, POS, b, MarkerName, Allele1, i.MarkerName) %>% as.data.table
beta
 beta<-select(do.call(rbind,readRDS('~/height_prediction/gwas/ukb_afr/output/hei_phys_100000_0.0005_v2.Rds')), CHR, POS, b, MarkerName, Allele1) %>% as.data.table
 beta1<-readRDS('~/height_prediction/loc_anc_analysis/output/final_plink.Rds')
beta1
merge(beta, beta1)
beta1
merge(beta, beta1)-> beta2
beta2[,Quantile:=cut(AA.rate, breaks=quantile(AA.rate, probs=seq(0,1, by=0.05), na.rm=T), include.lowest=T)]
ls()
df1
chr=22
rate.dist<-3000
betas<-beta2[CHR==chr]
maps<-fread(paste0('zcat /project/mathilab/data/maps_b37/maps_chr.', chr, '.gz'))
       beta<-select(do.call(rbind,readRDS('~/height_prediction/gwas/WHI/output/hei_phys_100000_0.0005_v2.Rds')), CHR, POS, b, MarkerName, Allele1) %>% as.data.table
        beta1<-readRDS('~/height_prediction/loc_anc_analysis/output/final_plink.Rds')
merge(beta, beta1)-> beta2
cat('start chr ')
cat(chr)
cat('\n')
#rate.dist <- 20000
rate.dist<-3000
betas<-beta2[CHR==chr]
maps<-fread(paste0('zcat /project/mathilab/data/maps_b37/maps_chr.', chr, '.gz'))
snps <- read.table(paste0("~/height_prediction/input/WHI/WHI_b37_strand_include_kgCY_chr", chr, ".phsnp"), as.is=TRUE)
colnames(snps) <- c("ID", "CHR", "Map", "POS", "REF", "ALT")
snps
colnames(snps)
betas
beta2
       beta<-select(do.call(rbind,readRDS('~/height_prediction/gwas/WHI/output/hei_phys_100000_0.0005_v2.Rds')), CHR, POS, b, i.MarkerName, Allele1) %>% as.data.table
        beta1<-readRDS('~/height_prediction/loc_anc_analysis/output/final_plink.Rds')
merge(beta, beta1)-> beta2
beta2
rate.dist<-3000
betas<-beta2[CHR==chr]
maps<-fread(paste0('zcat /project/mathilab/data/maps_b37/maps_chr.', chr, '.gz'))
snps <- read.table(paste0("~/height_prediction/input/WHI/WHI_b37_strand_include_kgCY_chr", chr, ".phsnp"), as.is=TRUE)
colnames(snps) <- c("ID", "CHR", "Map", "POS", "REF", "ALT")
merge(snos, betas, by=c('CHR', 'POS'))
betas<-merge(snps, betas, by=c('CHR', 'POS'))
betas
setDT(betas)
AA.rate <- approxfun(maps$Physical_Pos, maps$AA_Map)
YRI.rate <- approxfun(maps$Physical_Pos, maps$YRI_LD)
CEU.rate <- approxfun(maps$Physical_Pos, maps$CEU_LD)
COMBINED.rate<-approxfun(maps$Physical_Pos,maps$COMBINED_LD)
betas$AA.rate <- 0
betas$CEU_YRI_diff.rate <- 0
betas$CEU.rate <- 0
betas$YRI.rate <- 0
betas$COMBINED.rate<-0
for(i in 1:NROW(betas)){
    cat(i, '\r')
    AA.x <- AA.rate(betas$POS[i]+(rate.dist/2))-AA.rate(betas$POS[i]-(rate.dist/2))
    betas$AA.rate[i] <- AA.x
    CEU.x <- CEU.rate(betas$POS[i]+(rate.dist/2))-CEU.rate(betas$POS[i]-(rate.dist/2))
    betas$CEU.rate[i] <- CEU.x
    YRI.x <- YRI.rate(betas$POS[i]+(rate.dist/2))-YRI.rate(betas$POS[i]-(rate.dist/2))
    betas$YRI.rate[i]<-YRI.x
    COMBINED.x<-COMBINED.rate(betas$POS[i]+(rate.dist/2))-COMBINED.rate(betas$POS[i]-(rate.dist/2))
    betas$COMBINED.rate[i]<-COMBINED.x
    betas$CEU_YRI_diff.rate[i] <- abs(CEU.x-YRI.x)
}
betas
betas[1,]
library(ggplot2)
library(reshape2)
library(data.table)
library(reshape)
library(RColorBrewer)
library(MASS)
library(cowplot)
library(dplyr)
options(scipen=999)
args<-'gwas'
dtset<-args[1]
source('~/height_prediction/strat_prs/scripts/fancy_scientific.R')
a_list<-vector('list', 2)
ci<-vector('list', 2)
names(ci)<-c('AA','CEU')
names(a_list)<-c("AA","CEU")
a_list[['AA']]<-vector('list', 5)
a_list[['CEU']]<-vector('list', 5)
ci[['AA']]<-vector('list', 5)
ci[['CEU']]<-vector('list', 5)
names(a_list[['AA']])<-c("HRS_eur","JHS","WHI", "ukb_afr", "HRS_afr")
names(a_list[['CEU']])<-c("HRS_eur","JHS","WHI","ukb_afr", "HRS_afr")
names(ci[['AA']])<-c("HRS_eur","JHS","WHI", "ukb_afr", "HRS_afr")
names(ci[['CEU']])<-c("HRS_eur","JHS","WHI","ukb_afr", "HRS_afr")
for(I in c("WHI","JHS","ukb_afr","HRS_eur", "HRS_afr")){
        a_list[['AA']][[I]]<-vector('list', 6)
        a_list[['CEU']][[I]]<-vector('list', 6)
        ci[['AA']][[I]]<-vector('list', 6)
        ci[['CEU']][[I]]<-vector('list', 6)
        names(a_list[['AA']][[I]])<-c("3000","6000","10000","20000", "40000", "100000")
        names(a_list[['CEU']][[I]])<-c("3000","6000","10000","20000","40000","100000")
        names(ci[['AA']][[I]])<-c("3000","6000","10000","20000", "40000", "100000")
        names(ci[['CEU']][[I]])<-c("3000","6000","10000","20000","40000","100000")
        for(J in names(a_list[['AA']][[I]])){
                a_list[['AA']][[I]][[J]]<-readRDS(paste0('~/height_prediction/strat_prs/output/part_R2_', I,"_",dtset, "_", J, "_AA_v2.Rds"))
                a_list[['CEU']][[I]][[J]]<-readRDS(paste0('~/height_prediction/strat_prs/output/part_R2_', I, "_", dtset,"_", J, "_CEU_v2.Rds"))
                ci[['AA']][[I]][[J]]<-readRDS(paste0('~/height_prediction/strat_prs/output/results_', I,"_",dtset, "_", J, "_AA_v2.Rds"))
                ci[['CEU']][[I]][[J]]<-readRDS(paste0('~/height_prediction/strat_prs/output/results_', I, "_", dtset,"_", J, "_CEU_v2.Rds"))
        }
}
